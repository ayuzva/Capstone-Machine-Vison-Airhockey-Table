#include <stdint.h> //Library defining integer data types used in some of the variables

long loop_counter; //Main program loop counter variables, used for timing the program
long timer_old; 
long timer_value;
uint32_t micros_old; 

volatile int16_t position_M1;  //Step quanity storage variables
volatile int16_t position_M2;

int16_t real_position_x; // Current position in X,Y coordinate system
int16_t real_position_y;

//Stepper directions also needed in interrupts can be substituted for NOPs
int8_t dir_M1; //(dir=1 positive, dir=-1 negative, dir =0 stopped)
int8_t dir_M2;

int16_t speed_M1; //Current speed of the steper in steps/sec
int16_t speed_M2;
int16_t target_position_M1; //Desired position of the puck recieved from vision system, converted to stepper reference frame
int16_t target_position_M2;
int16_t target_speed_M1; //Desired speed generated by speed update algorithm.
int16_t target_speed_M2;
int16_t acceleration_M1;
int16_t acceleration_M2;
int16_t max_speed;
int16_t max_acceleration;

int16_t pos_stop_M1; //Predicted stopping positions based on decleration profile
int16_t pos_stop_M2;

int16_t target_x_mm;//Constrained target position recieved from vision system
int16_t target_y_mm;

int16_t user_max_speed;//Maximum speed variable recieved from configurations

unsigned int xcoord; //Recieved coordinates from vision system
unsigned int ycoord;

int16_t xcoords; //Converted coordinates from vision system into robot frame of reference
int16_t ycoords;

int16_t xold;

//char machineState = 'f';

//Utility functions, used in calculations.
int freeRam () {
  extern int __heap_start, *__brkval;
  int v;
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}

//uint8_t newPacket;
char Buffer[1]; //= "00";

// Arduino abs function sometimes fail!
int16_t myAbs(int16_t param)
{
  if (param < 0)
    return -param;
  else
    return param;
}

// Extract sign of a variable
int sign(int val)
{
  if (val < 0)
    return (-1);
  else
    return (1);
}
